name: AlgBank
steps:
  alg-management:
    goal: RUNNING
    title: "Algorithm Management"
    description: "The Algorithm Management Service supports adding, removing, and updating the metadata for an algorithm."
    versionNum: 1.1.2
    essential: true
    args:
    - "--esAddr={{ES_HOST}}"
    - "--esIndex={{ES_INDEX}}"
    cpus: 1
    memory: 1024 
    disk: 0
    gpus: 0
    env:
      FLUENTD_ADDR: "{{VIP:ab-fluentd:0}}"
      SERVICE_NAME: "algManagement"
      VAULT_SKIP_VERIFY: "{{VAULT_SKIP_VERIFY}}"
      COMMON_NAME: "{{VAULT_COMMON_NAME}}"
      VAULT_ADDR: "{{VAULT_ADDR}}"
      GATEKEEPER_ADDR: "{{VAULT_GATEKEEPER_ADDR}}"
      ROLE_ID: "algManagement"
      TRIG_SERVICE_ADDR: "http://{{VIP:trig-management:1}}"
      JWT_AUTHENTICATION_ENABLED: "false"
      JWT_ADMIN_GROUPS: "algbank_admins,algbank_services"
      AUTH_API_ADDR: "{{KONG_AUTH_URL}}"
    container:
      docker:
        image: "{{DOCKER_BASE}}/alg_management:1.1.2"
        network: BRIDGE
        privileged: false
        forcePull: true
        portMappings: 
        - container: 443
          host: 0
          service: 0
          protocol: tcp
          name: tls
          vip: true
        - container: 80
          host: 0
          service: 0
          protocol: tcp
          name: http
          vip: true
    healthChecks: 
      gracePeriodSeconds: 60
      intervalSeconds: 60
      timeoutSeconds: 20
      maxConsecutiveFailures: 3
      portIndex: 1
      path: "/health"
      protocol: "MESOS_HTTP"
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
    labels:
      HAPROXY_GROUP: "internal"
      HAPROXY_0_REDIRECT_TO_HTTPS: "true"
  alg-invocation:
    goal: RUNNING
    title: "Algorithm Invocation"
    description: "The Algorithm Invocation Service allows callers to invoke algorithms manually with specified datasets."
    versionNum: 1.1.2
    essential: true
    args:
    - "--esAddr={{ES_HOST}}"
    - "--esIndex={{ES_INDEX}}"
    - "--zk={{ZK_ADDR}}"
    - "--kafkaTopic={{BRIGADE_INPUT}}"
    - "--recipeTopic={{RECIPE_TOPIC}}"
    cpus: 4
    memory: 2048
    disk: 0
    gpus: 0
    env:
      FLUENTD_ADDR: "{{VIP:ab-fluentd:0}}"
      SERVICE_NAME: "algInvocation"
      VAULT_SKIP_VERIFY: "{{VAULT_SKIP_VERIFY}}"
      COMMON_NAME: "{{VAULT_COMMON_NAME}}"
      ZK_KAFKA_ROOT_PATH: "{{KAFKA_ZK_PATH}}"
      VAULT_ADDR: "{{VAULT_ADDR}}"
      GATEKEEPER_ADDR: "{{VAULT_GATEKEEPER_ADDR}}"
      ROLE_ID: "algInvocation"
      STDOUT_DISABLE: "true"
      MESOS_QUERY_LIMIT: "10000"
      MESOS_POLL_DURATION: "1s"
      ALGBANK_FRAMEWORK_NAME: "{{DCOS_SERVICE_NAME}}"
      JWT_AUTHENTICATION_ENABLED: "false"
      JWT_ADMIN_GROUPS: "algbank_admins,algbank_services"
      AUTH_API_ADDR: "{{KONG_AUTH_URL}}"
    container:
      docker:
        image: "{{DOCKER_BASE}}/alg_invocation:1.1.2"
        network: BRIDGE
        privileged: false
        forcePull: true
        portMappings:
        - container: 443
          host: 0
          service: 0
          protocol: tcp
          name: tls
          vip: true
        - container: 80
          host: 0
          service: 0
          protocol: tcp
          name: http
          vip: true
    healthChecks: 
      gracePeriodSeconds: 60
      intervalSeconds: 60
      timeoutSeconds: 20
      maxConsecutiveFailures: 3
      portIndex: 1
      path: "/health"
      protocol: "MESOS_HTTP"
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
    labels:
      HAPROXY_GROUP: "internal"
      HAPROXY_0_REDIRECT_TO_HTTPS: "true"
  trig-management:
    goal: RUNNING
    title: "Trigger Management"
    description: "The Trigger Management Service supports adding, removing, and updating the metadata for an trigger."
    versionNum: 1.1.2
    essential: true
    args:
    - "--esAddr={{ES_HOST}}"
    - "--esIndex={{ES_INDEX}}"
    cpus: 1
    memory: 1024
    disk: 0
    gpus: 0
    env:
      FLUENTD_ADDR: "{{VIP:ab-fluentd:0}}"
      SERVICE_NAME: "trigManagement"
      VAULT_SKIP_VERIFY: "{{VAULT_SKIP_VERIFY}}"
      COMMON_NAME: "{{VAULT_COMMON_NAME}}"
      VAULT_ADDR: "{{VAULT_ADDR}}"
      GATEKEEPER_ADDR: "{{VAULT_GATEKEEPER_ADDR}}"
      ROLE_ID: "trigManagement"
      JWT_AUTHENTICATION_ENABLED: "false"
      JWT_ADMIN_GROUPS: "algbank_admins,algbank_services"
      AUTH_API_ADDR: "{{KONG_AUTH_URL}}"
    container:
      docker:
        image: "{{DOCKER_BASE}}/trig_management:1.1.2"
        network: BRIDGE
        privileged: false
        forcePull: true
        portMappings: 
        - container: 443
          host: 0
          service: 0
          protocol: tcp
          name: tls
          vip: true
        - container: 80
          host: 0
          service: 0
          protocol: tcp
          name: http
          vip: true
    healthChecks: 
      gracePeriodSeconds: 60
      intervalSeconds: 20
      timeoutSeconds: 2
      maxConsecutiveFailures: 3
      portIndex: 1
      path: "/health"
      protocol: "MESOS_HTTP"
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
    labels:
      HAPROXY_GROUP: "internal"
      HAPROXY_0_REDIRECT_TO_HTTPS: "true"
  resolver:
    goal: RUNNING
    title: "HTTP Resolver"
    description: "The Http Resolver Service translates http/s paths into filesystem locations if possible, to allow users to download desired output files."
    versionNum: 1.1.2
    essential: true
    cpus: 1
    memory: 1024
    disk: 0
    gpus: 0
    env:
      FLUENTD_ADDR: "{{VIP:ab-fluentd:0}}"
      SERVICE_NAME: "resolver"
      CONFIG_PATH: "/tmp/config"
    container:
      volumes:
      - containerPath: "/download"
        hostPath: "/share/resolver/downloads"
        mode: "RW"
      - containerPath: "/tmp/config"
        hostPath: "/share/resolver/config"
        mode: "RO"
      docker:
        image: "{{DOCKER_BASE}}/resolver:1.1.2"
        network: BRIDGE
        privileged: false
        forcePull: true
        portMappings: 
        - container: 443
          host: 0
          service: 0
          protocol: tcp
          name: tls
          vip: true
        - container: 80
          host: 0
          service: 0
          protocol: tcp
          name: http
          vip: true
    healthChecks: 
      gracePeriodSeconds: 60
      intervalSeconds: 20
      timeoutSeconds: 2
      maxConsecutiveFailures: 3
      portIndex: 1
      path: "/health"
      protocol: "MESOS_HTTP"
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
  ab-catalog:
    goal: RUNNING
    title: AlgBank Catalog 
    description: "The AlgBank Catalog service is responsible for reading the output metadata and creating the catalog messages for the output. It will need read access to any locations on the filesystem where algorithms will output data."
    versionNum: 1.1.2
    essential: true
    cpus: 2
    memory: 1024
    disk: 0
    gpus: 0
    args:
    - "--topic={{BRIGADE_OUTPUT}}"
    - "--invokeTopic={{CATALOG_TOPIC}}"
    - "--group=catalog-service-ab"
    - "--zk={{ZK_ADDR}}"
    env:
      FLUENTD_ADDR: "{{VIP:ab-fluentd:0}}"
      ZK_KAFKA_ROOT_PATH: "/dcos-service-kafka"
      PROCESS_ALL: "false"
    container:
      volumes:
      - containerPath: "/share"
        hostPath: "/share"
        mode: "RO"
      docker:
        image: "{{DOCKER_BASE}}/recipe_catalog:1.1.2"
        network: BRIDGE
        privileged: false
        forcePull: true
        portMappings: 
        - container: 80
          host: 0
          service: 0
          protocol: tcp
          name: http
          vip: true
    healthChecks: 
      gracePeriodSeconds: 60
      intervalSeconds: 20
      timeoutSeconds: 2
      maxConsecutiveFailures: 3
      portIndex: 0
      path: "/health"
      protocol: "MESOS_HTTP"
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false

  recipe-catalog:
    goal: RUNNING
    title: "Recipe Catalog Service"
    description: "This service acts like catalog to provide a new data message to the triggers to run the next step in a recipe. Again needs access to the filesystem where algorithms will be allowed to output data."
    versionNum: 1.1.2
    essential: true
    cpus: 2
    memory: 1024
    disk: 0
    gpus: 0
    args:
    - "--topic={{BRIGADE_OUTPUT}}"
    - "--invokeTopic={{RECIPE_TOPIC}}"
    - "--group=recipe-catalog-sim"
    - "--zk={{ZK_ADDR}}"
    env:
      FLUENTD_ADDR: "{{VIP:ab-fluentd:0}}"
      ZK_KAFKA_ROOT_PATH: "{{KAFKA_ZK_PATH}}"
      PROCESS_ALL: "true"
    container:
      volumes:
      - containerPath: "/share"
        hostPath: "/share"
        mode: "RO"
      docker:
        image: "{{DOCKER_BASE}}/recipe_catalog:1.1.2"
        network: BRIDGE
        privileged: false
        forcePull: true
        portMappings: 
        - container: 80
          host: 0
          service: 0
          protocol: tcp
          name: http
          vip: true
    healthChecks: 
      gracePeriodSeconds: 60
      intervalSeconds: 20
      timeoutSeconds: 2
      maxConsecutiveFailures: 3
      portIndex: 0
      path: "/health"
      protocol: "MESOS_HTTP"
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
  recipe-invoke-trigger:
    goal: RUNNING
    title: "Recipe Invoke Trigger"
    description: "This service is a trigger exec service that is watching the recipe-catalog service output topic for messages."
    versionNum: 1.1.2
    essential: true
    cpus: 1
    memory: 1024
    disk: 0
    gpus: 0
    args:
    - "--topic={{RECIPE_TOPIC}}"
    - "--group=recipe-invoke-trigger"
    - "--esAddr={{ES_HOST}}"
    - "--esIndex={{ES_INDEX}}"
    - "--eventType=algorithm"
    - "--zk={{ZK_ADDR}}"
    env:
      FLUENTD_ADDR: "{{VIP:ab-fluentd:0}}"
      JWT_ADDR: "http://{{VIP:jwtstub:1}}"
      SERVICE_NAME: "trigExec_recipeInvoke"
      VAULT_SKIP_VERIFY: "{{VAULT_SKIP_VERIFY}}"
      COMMON_NAME: "{{VAULT_COMMON_NAME}}"
      ZK_KAFKA_ROOT_PATH: "{{KAFKA_ZK_PATH}}"
      VAULT_ADDR: "{{VAULT_ADDR}}"
      GATEKEEPER_ADDR: "{{VAULT_GATEKEEPER_ADDR}}"
      ROLE_ID: "trigRecipeExec"
      ADD_EVENT: "false"
      INVOCATION_ADDR: "http://{{VIP:alg-invocation:1}}"
      JWT_AUTHENTICATION_ENABLED: "false"
      JWT_ADMIN_GROUPS: "algbank_admins,algbank_services"
      AUTH_API_ADDR: "{{KONG_AUTH_URL}}"
      QUARTERMASTER_VALIDATION: "false"
    container:
      docker:
        image: "{{DOCKER_BASE}}/json_trig_execution:1.1.2"
        network: BRIDGE
        privileged: false
        forcePull: true
        portMappings: 
        - container: 80
          host: 0
          service: 0
          protocol: tcp
          name: http
          vip: true
    healthChecks: 
      gracePeriodSeconds: 60
      intervalSeconds: 20
      timeoutSeconds: 2
      maxConsecutiveFailures: 3
      portIndex: 0
      path: "/health"
      protocol: "MESOS_HTTP"
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
  recipe-trigger:
    goal: RUNNING
    title: "Recipe Trigger"
    description: "This service is a trigger exec service that is watching the brigade output topic for messages.  It is used to check error codes that may be needed in triggers."
    versionNum: 1.1.2
    essential: true
    cpus: 1
    memory: 1024
    disk: 0
    gpus: 0
    args:
    - "--topic={{BRIGADE_OUTPUT}}"
    - "--group=recipe-trigger"
    - "--esAddr={{ES_HOST}}"
    - "--esIndex={{ES_INDEX}}"
    - "--eventType=algorithm"
    - "--zk={{ZK_ADDR}}"
    env:
      FLUENTD_ADDR: "{{VIP:ab-fluentd:0}}"
      JWT_ADDR: "http://{{VIP:jwtstub:1}}"
      SERVICE_NAME: "trigExec_recipe"
      VAULT_SKIP_VERIFY: "{{VAULT_SKIP_VERIFY}}"
      COMMON_NAME: "{{VAULT_COMMON_NAME}}"
      ZK_KAFKA_ROOT_PATH: "{{KAFKA_ZK_PATH}}"
      VAULT_ADDR: "{{VAULT_ADDR}}"
      FLUENTD_PORT: "{{FLUENTD_PORT}}"
      GATEKEEPER_ADDR: "{{VAULT_GATEKEEPER_ADDR}}"
      ROLE_ID: "trigRecipeExec"
      ADD_EVENT: "false"
      INVOCATION_ADDR: "http://{{VIP:alg-invocation:1}}"
      JWT_AUTHENTICATION_ENABLED: "false"
      JWT_ADMIN_GROUPS: "algbank_admins,algbank_services"
      AUTH_API_ADDR: "{{KONG_AUTH_URL}}"
      QUARTERMASTER_VALIDATION: "false"
    container:
      docker:
        image: "{{DOCKER_BASE}}/json_trig_execution:1.1.2"
        network: BRIDGE
        privileged: false
        forcePull: true
        portMappings: 
        - container: 80
          host: 0
          service: 0
          protocol: tcp
          name: http
          vip: true
    healthChecks: 
      gracePeriodSeconds: 60
      intervalSeconds: 20
      timeoutSeconds: 2
      maxConsecutiveFailures: 3
      portIndex: 0
      path: "/health"
      protocol: "MESOS_HTTP"
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
  vault-cfg:
    goal: FINISH
    title: "Vault Configuration"
    description: "This service sets up vault with the alg bank settings.  It requires that Vault is initialized and the PKI plugin has been mounted."
    versionNum: 1.1.0
    essential: true
    cpus: 1
    memory: 1024
    disk: 0
    gpus: 0
    args:
    - "--vaultAddr={{VAULT_ADDR}}"
    - "--gatekeeperAddr={{VAULT_GATEKEEPER_ADDR}}"
    - "--token={{VAULT_ROOT_TOKEN}}"
    - "vault"
    - "--domain={{DOMAIN_NAME}}" 
    - "--subdomain=true"
    - "--maxttl=72h"
    - "--ab-suffix={{DCOS_SERVICE_PATH}}/alg-bank" 
    - "--jwt-name=jwtstub.jwtstub" 
    - "--algm-name=alg-management.core"
    container:
      docker:
        image: "{{DOCKER_BASE}}/vaultcfg:1.1.0"
        network: BRIDGE
        privileged: false
        forcePull: true
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
  frontend-install:
    goal: FINISH
    title: "Install Frontend"
    description: "Installs the AlgBank Frontend in to the appropriate location in the static store and fix the API"
    versionNum: 1.1.1
    essential: true
    cpus: 0.1
    memory: 128
    disk: 0
    gpus: 0
    cmd: "sh"
    args:
    - "installForKey.sh"
    - "{{KONG_API_NAME}}"
    - "/static_store"
    - "trig-exec"
    - "trigger-exec-base"
    container:
      volumes:
      - containerPath: "/static_store"
        hostPath: "{{KEY_STATIC_STORE}}"
        mode: "RW"
      docker:
        image: "{{DOCKER_BASE}}/frontend:1.1.1"
        network: BRIDGE
        privileged: false
        forcePull: true
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
  kong-algi:
    goal: FINISH
    title: "AlgInvocation Kong API"
    description: "Installs the AlgInvocation Kong API into Key3"
    versionNum: 1.1.0
    essential: true
    cpus: 0.1
    memory: 128
    disk: 0
    gpus: 0
    args:
    - "{{KONG_ALGI_URI}}"
    - "http://{{VIP:alg-invocation:1}}"
    env:
      KONG_URL: "{{KONG_URL}}"
      AUTH_URL: "{{KONG_AUTH_URL}}"
    container:
      docker:
        image: "{{DOCKER_BASE}}/kong_api_add:1.1.0"
        network: BRIDGE
        privileged: false
        forcePull: true
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
  kong-algm:
    goal: FINISH
    title: "AlgManagement Kong API"
    description: "Installs the AlgManagement Kong API into Key3"
    versionNum: 1.1.0
    essential: true
    cpus: 0.1
    memory: 128
    disk: 0
    gpus: 0
    args:
    - "{{KONG_ALGM_URI}}"
    - "http://{{VIP:alg-management:1}}"
    env:
      KONG_URL: "{{KONG_URL}}"
      AUTH_URL: "{{KONG_AUTH_URL}}"
    container:
      docker:
        image: "{{DOCKER_BASE}}/kong_api_add:1.1.0"
        network: BRIDGE
        privileged: false
        forcePull: true
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
  kong-trigm:
    goal: FINISH
    title: "TrigManagement Kong API"
    description: "Installs the TrigManagement Kong API into Key3"
    versionNum: 1.1.0
    essential: true
    cpus: 0.1
    memory: 128
    disk: 0
    gpus: 0
    args:
    - "{{KONG_TRIGM_URI}}"
    - "http://{{VIP:trig-management:1}}"
    env:
      KONG_URL: "{{KONG_URL}}"
      AUTH_URL: "{{KONG_AUTH_URL}}"
    container:
      docker:
        image: "{{DOCKER_BASE}}/kong_api_add:1.1.0"
        network: BRIDGE
        privileged: false
        forcePull: true
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
  kong-controller:
    goal: FINISH
    title: "Controller Kong API"
    description: "Installs the AlgBank Controller Kong API into Key3"
    versionNum: 1.1.0
    essential: true
    cpus: 0.1
    memory: 128
    disk: 0
    gpus: 0
    args:
    - "{{KONG_CONTROLLER_URI}}"
    - "http://{{CONTROLLER_ADDR}}"
    env:
      KONG_URL: "{{KONG_URL}}"
      AUTH_URL: "{{KONG_AUTH_URL}}"
    container:
      docker:
        image: "{{DOCKER_BASE}}/kong_api_add:1.1.0"
        network: BRIDGE
        privileged: false
        forcePull: true
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
  kong-resolver:
    goal: FINISH
    title: "Resolver Kong API"
    description: "Installs the AlgBank Resolver Kong API into Key3"
    versionNum: 1.1.0
    essential: true
    cpus: 0.1
    memory: 128
    disk: 0
    gpus: 0
    args:
    - "{{KONG_RESOLVER_URI}}"
    - "http://{{VIP:resolver:1}}"
    env:
      KONG_URL: "{{KONG_URL}}"
      AUTH_URL: "{{KONG_AUTH_URL}}"
    container:
      docker:
        image: "{{DOCKER_BASE}}/kong_api_add:1.1.0"
        network: BRIDGE
        privileged: false
        forcePull: true
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
  kong-brigade:
    goal: FINISH
    title: "Brigade Kong API"
    description: "Installs the AlgBank Brigade Kong API into Key3"
    versionNum: 1.1.0
    essential: true
    cpus: 0.1
    memory: 128
    disk: 0
    gpus: 0
    args:
    - "{{KONG_BRIGADE_URI}}"
    - "http://{{VIP:brigade:0}}"
    env:
      KONG_URL: "{{KONG_URL}}"
      AUTH_URL: "{{KONG_AUTH_URL}}"
    container:
      docker:
        image: "{{DOCKER_BASE}}/kong_api_add:1.1.0"
        network: BRIDGE
        privileged: false
        forcePull: true
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
  kong-faas:
    goal: FINISH
    title: "OpenFaas Kong API"
    description: "Installs the AlgBank OpenFaas Kong API into Key3"
    versionNum: 1.1.0
    essential: true
    cpus: 0.1
    memory: 128
    disk: 0
    gpus: 0
    args:
    - "{{KONG_FAAS_URI}}"
    - "http://{{VIP:faas-gateway:0}}"
    env:
      KONG_URL: "{{KONG_URL}}"
      AUTH_URL: "{{KONG_AUTH_URL}}"
    container:
      docker:
        image: "{{DOCKER_BASE}}/kong_api_add:1.1.0"
        network: BRIDGE
        privileged: false
        forcePull: true
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
  kong-catref:
    goal: FINISH
    title: "Catalog Reference Kong API"
    description: "Installs the AlgBank Catalog Reference Kong API into Key3"
    versionNum: 1.1.0
    essential: true
    cpus: 0.1
    memory: 128
    disk: 0
    gpus: 0
    args:
    - "{{KONG_CATREF_URI}}"
    - "{{CAT_REF_ADDR}}"
    env:
      KONG_URL: "{{KONG_URL}}"
      AUTH_URL: "{{KONG_AUTH_URL}}"
    container:
      docker:
        image: "{{DOCKER_BASE}}/kong_api_add:1.1.0"
        network: BRIDGE
        privileged: false
        forcePull: true
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false

  grafana-importer:
    goal: FINISH
    title: "Grafana Importer"
    description: "Installs the AlgBank Grafana Dashboards and Datasources"
    versionNum: 1.1.0
    essential: true
    cpus: 0.1
    memory: 128
    disk: 0
    gpus: 0
    args:
    - "{{GRAFANA_TOKEN}}"
    - "{{GRAFANA_URL}}"
    - "{{ES_METRICS_ADDR}}"
    container:
      docker:
        image: "{{DOCKER_BASE}}/dashboard_installer:1.1.0"
        network: BRIDGE
        privileged: false
        forcePull: true
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false

  ab-fluentd:
    goal: RUNNING
    title: "AlgBank FluentD"
    description: "Contains the fluentd configuration for the AlgBank logging and metrics"
    versionNum: 1.2.3
    essential: true
    cpus: 1
    memory: 512
    disk: 0
    gpus: 0
    args:
    env:
      ELASTICSEARCH_HOST: "{{ES_METRICS_ADDR}}"
    container:
      docker:
        image: "{{DOCKER_BASE}}/ab-fluentd:1.2.3"
        network: BRIDGE
        privileged: false
        forcePull: true
        portMappings: 
        - container: 8888
          host: 0
          service: 0
          protocol: tcp
          name: http
          vip: true
        - container: 8080
          host: 0
          service: 0
          protocol: tcp
          name: health
          vip: true
    healthChecks: 
      gracePeriodSeconds: 120
      intervalSeconds: 30
      timeoutSeconds: 5
      maxConsecutiveFailures: 3
      portIndex: 1
      path: "/"
      protocol: "MESOS_HTTP"
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
  brigade:
    goal: RUNNING
    versionNum: 1.2.7_1.1.0
    essential: true
    cpus: 6
    memory: 1024
    disk: 0
    gpus: 0
    args:
    env:
      SPRING_CLOUD_ZOOKEEPER_ENABLED: "false"
      kafka.zk: "{{ZK_ADDR}}{{KAFKA_ZK_PATH}}"
      kafka.consumer.group: "brigade-{{DCOS_SERVICE_NAME}}"
      kafka.consumer.input: "{{BRIGADE_INPUT}}"
      spring.metrics.export.statsd.host: "{{VIP:statsd}}"
      kafka.consumer.lag-lower: "501"
      SPRING_CLOUD_ZOOKEEPER_CONFIG_WATCHER_ENABLED: "false"
      SPRING_APPLICATION_NAME: "brigade-{{DCOS_SERVICE_NAME}}"
      logging.level.mil.nasic.ab.plugin: "TRACE"
      spring.metrics.export.statsd.prefix: "brigade-{{DCOS_SERVICE_NAME}}"
      kafka.producer.output: "{{BRIGADE_OUTPUT}}"
      kafka.consumer.properties.auto.offset.reset: "latest"
      kafka.consumer.fetch.rate.min: "-1"
      spring.metrics.export.enabled: "true"
      spring.metrics.export.statsd.port: "8125"
      kafka.consumer.lag-upper: "500"
      scheduling.loop.max.delay.ms: "500"
      lease.offer.expiry.secs: "1"
      accept.gpus: "true"
      num.tiers: "1"
      kafka.producer.error: "{{BRIGADE_ERROR}}"
      scheduling.loop.min.delay.ms: "1"
    container:
      docker:
        image: "{{DOCKER_BASE}}/ab-brigade:1.2.7_1.1.0"
        network: HOST
        privileged: false
        forcePull: true
        portMappings: 
        - host: 9020
          protocol: tcp
          name: tls
          vip: true
    healthChecks: 
      gracePeriodSeconds: 120
      intervalSeconds: 30
      timeoutSeconds: 5
      maxConsecutiveFailures: 3
      portIndex: 0
      path: "/health"
      protocol: "MESOS_HTTP"
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
    labels:
      MARATHON_SINGLE_INSTANCE_APP: "true"
  statsd:
    goal: RUNNING
    title: "Brigade Metrics Statsd"
    description: "Statsd is used by Brigade for recording metrics.  Statsd is backed by elastic search so all data does get stored in ES."
    versionNum: 0.4.2.2
    essential: true
    cpus: 1
    memory: 128
    disk: 0
    gpus: 0
    args:
    env:
      "ES_ADDR": "{{ES_METRICS_ADDR}}"
    container:
      docker:
        image: "{{DOCKER_BASE}}/statsd-elasticsearch:0.4.2.2"
        network: BRIDGE
        privileged: false
        forcePull: true
        portMappings: 
        - container: 8125
          host: 0
          service: 0
          protocol: udp
          name: udp
          vip: true
        - container: 8126
          host: 0
          service: 0
          protocol: tcp
          name: tcp
          vip: true
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false

  faas-dcos:
    goal: RUNNING
    title: "OpenFaaS DCOS plugin"
    description: "OpenFaaS plugin for working with Marathon/DCOS for running the Function images."
    versionNum: 1.0.0
    essential: true
    cpus: 0.5
    memory: 128
    disk: 0
    gpus: 0
    args:
    env:
      FUNCTION_NAMESPACE: "{{DCOS_SERVICE_PATH}}/faas/functions"
      MARATHON_URL: "http://master.mesos/service/marathon/"
    container:
      docker:
        image: "{{DOCKER_BASE}}/faas/faas-marathon:1.0.0"
        network: BRIDGE
        privileged: false
        forcePull: true
        portMappings: 
        - container: 8080
          host: 0
          service: 0
          protocol: tcp
          name: faas-dcos
          vip: true
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
  faas-gateway:
    goal: RUNNING
    title: "OpenFaaS Gateway"
    description: "OpenFaaS Gateway provides the actual endpoint functionality."
    versionNum: 1.0.0
    essential: true
    cpus: 0.5
    memory: 128
    disk: 0
    gpus: 0
    args:
    env:
      faas_prometheus_host: "localhost"
      faas_prometheus_port: "9090"
      functions_provider_url: "http://{{VIP:faas-dcos:0}}/"
    container:
      docker:
        image: "{{DOCKER_BASE}}/faas/openfaas:1.0.0"
        network: BRIDGE
        privileged: false
        forcePull: true
        portMappings: 
        - container: 8080
          host: 0
          service: 0
          protocol: tcp
          name: faas-gateway
          vip: true
    healthChecks: 
      gracePeriodSeconds: 10
      intervalSeconds: 2
      timeoutSeconds: 10
      maxConsecutiveFailures: 10
      portIndex: 0
      path: "/"
      protocol: "MESOS_HTTP"
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
 
  trigger-exec-base:
    goal: RUNNING
    title: "Trigger Exec"
    description: "This service is a trigger exec service that is watching the recipe-catalog service output topic for messages."
    versionNum: 1.1.2
    essential: true
    cpus: 1
    memory: 1024
    disk: 0
    gpus: 0
    args:
    - "--topic=changeme"
    - "--group=trigger-exec-base"
    - "--esAddr={{ES_HOST}}"
    - "--esIndex={{ES_INDEX}}"
    - "--eventType=algorithm"
    - "--zk={{ZK_ADDR}}"
    env:
      FLUENTD_ADDR: "{{VIP:ab-fluentd:0}}"
      JWT_ADDR: "http://{{VIP:jwtstub:1}}"
      SERVICE_NAME: "trigExec_recipeInvoke"
      VAULT_SKIP_VERIFY: "{{VAULT_SKIP_VERIFY}}"
      COMMON_NAME: "{{VAULT_COMMON_NAME}}"
      ZK_KAFKA_ROOT_PATH: "{{KAFKA_ZK_PATH}}"
      VAULT_ADDR: "{{VAULT_ADDR}}"
      GATEKEEPER_ADDR: "{{VAULT_GATEKEEPER_ADDR}}"
      ROLE_ID: "trigRecipeExec"
      ADD_EVENT: "false"
      INVOCATION_ADDR: "http://{{VIP:alg-invocation:1}}"
      JWT_AUTHENTICATION_ENABLED: "false"
      JWT_ADMIN_GROUPS: "algbank_admins,algbank_services"
      AUTH_API_ADDR: "{{KONG_AUTH_URL}}"
      QUARTERMASTER_VALIDATION: "false"
      QUARTERMASTER_ADDR: "{{QUARTERMASTER_ADDR}}"
    container:
      docker:
        image: "{{DOCKER_BASE}}/json_trig_execution:1.1.2"
        network: BRIDGE
        privileged: false
        forcePull: true
        portMappings: 
        - container: 80
          host: 0
          service: 0
          protocol: tcp
          name: http
          vip: true
    healthChecks: 
      gracePeriodSeconds: 60
      intervalSeconds: 20
      timeoutSeconds: 2
      maxConsecutiveFailures: 3
      portIndex: 0
      path: "/health"
      protocol: "MESOS_HTTP"
    fetch: 
    - uri: "{{SERVICE_FETCH}}"
      extract: true
      executable: false
      cache: false
plans:
  alg-bank:
    strategy: SERIAL
    manual: false
    version: "1.1.2"
    phases:
    - name: "config"
      enabled: true
      strategy: SERIAL
      step: ["vault-cfg", "kong-algi", "kong-algm", "kong-trigm", "kong-controller", "kong-resolver", "kong-brigade", "kong-faas", "kong-catref", "frontend-install", "grafana-importer"]
    - name: "brigade"
      enabled: true
      strategy: SERIAL
      step: ["statsd", "brigade"]
    - name: "core"
      enabled: true
      strategy: PARALLEL
      step: ["ab-fluentd", "alg-management", "alg-invocation", "trig-management", "resolver", "ab-catalog"]
    - name: "recipe"
      enabled: true
      strategy: PARALLEL
      step: ["recipe-catalog", "recipe-trigger", "recipe-invoke-trigger"]
    - name: "faas"
      enabled: true
      strategy: PARALLEL
      step: ["faas-dcos", "faas-gateway"]
    - name: "trig-exec"
      enabled: false
      strategy: PARALLEL
      step: []